#plot(x,y)
plot(processed_data$x, processed_data$y)
#New dataset
na_approx <- function(arr) {
arr1=arr
check=is.na(arr$y)
for (i in 1:100) {
if (check[i]){
j=i-1
while(check[j]){
j=j-1
}
k=i+1
while(check[k]){
k=k+1
}
arr1[i,2]=(arr[j,2]+arr[k,2])/2
next
}
}
return(arr1)
}
new_data=a1_data_set[order(a1_data_set$x),]
final_data=na_approx(new_data)
plot(final_data$x, final_data$y)
lm.fit=lm(final_data$y~final_data$x)
plot(final_data$x, final_data$y)
abline(lm.fit)
predicted_data=predict(lm.fit,final_data$x)
predicted_data=lm.fit(final_data$x)
predicted_data=lm.fit(as.matrix(final_data$x))
predicted_data=predict(lm.fit,interval = "prediction")
predicted_data
predicted_data=lm.fit(final_data$x,final_data$y)
predicted_data=lm.fit(as.matrix(final_data$x),final_data$y)
predicted_data
rmse=sqrt(mean((predicted_data-final_data$y)^2))
names(predicted_data)
predicted_model=lm.fit(as.matrix(final_data$x),final_data$y)
predicted_data=predicted_model$coefficients
rmse=sqrt(mean((predicted_data-final_data$y)^2))
rmse
library(readr)
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
#view(a1_data_set)
processed_data=na.omit(a1_data_set)
#names(processed_data) #Print
#attach(processed_data) #Store variable values in memory
#plot(x,y)
plot(processed_data$x, processed_data$y)
#New dataset
na_approx <- function(arr) {
arr1=arr
check=is.na(arr$y)
for (i in 1:100) {
if (check[i]){
j=i-1
while(check[j]){
j=j-1
}
k=i+1
while(check[k]){
k=k+1
}
arr1[i,2]=(arr[j,2]+arr[k,2])/2
next
}
}
return(arr1)
}
new_data=a1_data_set[order(a1_data_set$x),]
final_data=na_approx(new_data)
plot(final_data$x, final_data$y)
lm.fit=lm(final_data$y~final_data$x)
plot(final_data$x, final_data$y)
abline(lm.fit)
predicted_model=lm.fit(as.matrix(final_data$x),final_data$y)
predicted_data=predicted_model$coefficients
rmse=sqrt(mean((predicted_data-final_data$y)^2))
rmse
final_data$y
predicted_model=lm.fit(as.matrix(final_data$x),as.matrix(final_data$y))
predicted_data=predicted_model$coefficients
rmse=sqrt(mean((predicted_data-final_data$y)^2))
mae=mean(abs(predicted_data-final_data$y))
mae
predicted_data=predict(lm.fit,final_data$x)
predicted_data<-predict(lm.fit,final_data$x)
predicted_data<-predict(lm.fit,data.frame(final_data$x))
predicted_data
tr.net5 = nnet(y~., data=data, maxit=1000, size=5)
net5.pred=predict(tr.net5,as.matrix(X),type="class")
CM_net5=confusionMatrix(net5.pred,y)
CM_net5
tr.rf=train(as.matrix(Xdf),y,method="rf",preProcess = c("center","scale"))
rf.pred = predict(tr.rf)
CM_rf=confusionMatrix(rf.pred,y)
CM_rf
tr.rf=train(as.matrix(X),y,method="rf",preProcess = c("center","scale"))
tr.rf=train(as.matrix(X),y,method="rf",preProcess = c("center","scale"))
rf.pred = predict(tr.rf)
CM_rf=confusionMatrix(rf.pred,y)
CM_rf
tr.svmRadial=train(as.matrix(Xdf),y,method="svmRadial",preProcess = c("center","scale"))
svmRadial.pred = predict(tr.svmRadial)
CM_svmRadial=confusionMatrix(svmRadial.pred,y)
CM_svmRadial
#roll no. 140100067
rm(list=ls())
library("ggplot2")
library("scales")
library("dplyr")
library("e1071")
library("Metrics")
library("caret")
library("nnet")
data<-read.csv("../Downloads/data/a3-data-set.csv")
?confusionMatrix
#Accuracy is basically how often does the classifier predicts correctly
#Specificity is how often does it predict no when it is no
#Sensetivity is also known as true positive rate, when it is yes how often does it predict yes
#This is essentially a measure of how well the classifier performed as
#compared to how well it would have performed simply by chance.
#In other words, a model will have a high Kappa score if there is a
#big difference between the accuracy and the null error rate.
data$y=as.factor(data$y)
ctrl = trainControl(method="CV", number=10, returnResamp = "all")
y=data$y
X=as.matrix(data[,1:2])
tr.svmLinear=train(as.matrix(X),y,method="svmLinear",preProcess = c("center","scale"))
svmLinear.pred = predict(tr.svmLinear)
CM_svmLinear=confusionMatrix(svmLinear.pred,y)
CM_svmLinear
tr.svmRadial=train(as.matrix(X),y,method="svmRadial",preProcess = c("center","scale"))
svmRadial.pred = predict(tr.svmRadial)
CM_svmRadial=confusionMatrix(svmRadial.pred,y)
CM_svmRadial
tr.knn3=train(X,y,method="knn",preProcess = c("center","scale"),tuneGrid = expand.grid(.k=3))
knn3.pred = predict(tr.knn3)
CM_knn3=confusionMatrix(knn3.pred,y)
CM_knn3
tr.rf=train(as.matrix(X),y,method="rf",preProcess = c("center","scale"))
rf.pred = predict(tr.rf)
CM_rf=confusionMatrix(rf.pred,y)
CM_rf
# Create the forest.
output.forest <- randomForest(y ~ X,
data = data)
# Create the forest.
output.forest <- randomForest(y ~ as.matrix(X),
data = data)
names(data)
# Create the forest.
output.forest <- randomForest(y ~ x1+x2,
data = data)
# View the forest results.
print(output.forest)
print(predict(output.forest))
rf.pred=predict(output.forest)
CM_rf=confusionMatrix(rf.pred,y)
CM_rf
tr.rf=train(as.matrix(X),y,method="rf")
rf.pred = predict(tr.rf)
CM_rf=confusionMatrix(rf.pred,y)
CM_rf
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
processed_data=na.omit(a1_data_set)
lm.fit=lm(processed_data$y~processed_data$x)
size(processed_data)
length(processed_data)
length(processed_data$x)
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
definite_data=na.omit(a1_data_set)
lm.fit=lm(definite_data$y~definite_data$x)
check=is.na(a1_data_set$y)
for (i in 1:length(all_data_set$x)){
if(check[i]){
(a1_data_set$y)[i]=predict(lm.fit,(a1_data_set$x)[i])
}
next
}
for (i in 1:length(a1_data_set$x)){
if(check[i]){
(a1_data_set$y)[i]=predict(lm.fit,(a1_data_set$x)[i])
}
next
}
for (i in 1:length(a1_data_set$x)){
if(check[i]){
(a1_data_set$y)[i]=predict(lm.fit,data.frame((a1_data_set$x)[i]))
}
next
}
for (i in 1:length(a1_data_set$x)){
if(check[i]){
predict(lm.fit,data.frame((a1_data_set$x)[i]))
}
next
}
for (i in 1:length(a1_data_set$x)){
if(check[i]){
a=predict(lm.fit,data.frame((a1_data_set$x)[i]))
print(a)
}
next
}
for (i in 1:length(a1_data_set$x)){
if(check[i]){
a=predict(lm.fit,data.frame(a1_data_set$x[i])
print(a)
}
next
}
for (i in 1:length(a1_data_set$x)){
if(check[i]){
a=predict(lm.fit,data.frame(a1_data_set$x[i]))
print(a)
}
next
}
final_dataset=predict(lm.fit,data.frame(a1_data_set$x))
final_dataset
final_dataset=predict(lm.fit,data.frame(x=a1_data_set$x))
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
definite_data=na.omit(a1_data_set)
y=definite_data$y
x=definite_data$x
lm.fit=lm(y~x)
check=is.na(a1_data_set$y)
final_dataset=predict(lm.fit,data.frame(x=a1_data_set$x))
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
definite_data=na.omit(a1_data_set)
y=definite_data$y
x=definite_data$x
lm.fit=lm(y~x)
check=is.na(a1_data_set$y)
final_dataset=predict(lm.fit,data.frame(x=a1_data_set$x))
x=all_data_set$x
for (i in 1:length(a1_data_set$x)){
if(!check[i]){
final_dataset[i]=x[i]
}
next
}
final_dataset
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
definite_data=na.omit(a1_data_set)
y=definite_data$y
x=definite_data$x
lm.fit=lm(y~x)
check=is.na(a1_data_set$y)
final_dataset=predict(lm.fit,data.frame(x=a1_data_set$x))
final_dataset
check
for (i in 1:length(a1_data_set$x)){
if(check[i]==FALSE){
final_dataset[i]=x[i]
}
next
}
final_dataset
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
for (i in 1:length(a1_data_set$x)){
if(check[i]==FALSE){
final_dataset[i]=y[i]
}
next
}
final_data
final_dataset
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
definite_data=na.omit(a1_data_set)
y=definite_data$y
x=definite_data$x
lm.fit=lm(y~x)
check=is.na(a1_data_set$y)
final_dataset=predict(lm.fit,data.frame(x=a1_data_set$x))
y=all_data_set$y
for (i in 1:length(a1_data_set$x)){
if(check[i]==FALSE){
final_dataset[i]=y[i]
}
next
}
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
definite_data=na.omit(a1_data_set)
y=definite_data$y
x=definite_data$x
lm.fit=lm(y~x)
check=is.na(a1_data_set$y)
final_dataset=predict(lm.fit,data.frame(x=a1_data_set$x))
y=a1_data_set$y
for (i in 1:length(a1_data_set$x)){
if(check[i]==FALSE){
final_dataset[i]=y[i]
}
next
}
final_dataset
lm.newfit=lm(final_dataset$y~final_dataset$x)
lm.newfit=lm(data.frame(final_dataset$y)~data.frame(final_dataset$x))
lm.newfit=lm(data.frame(final_dataset)~data.frame(a1_data_set$x))
lm.newfit=lm(final_dataset~data.frame(a1_data_set$x))
lm.newfit=lm(final_dataset~a1_data_set$x)
lm.newfit=lm(final_dataset~a1_data_set$x)
lm.newfit
summary(lm.newfit)
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
definite_data=na.omit(a1_data_set)
y=definite_data$y
x=definite_data$x
lm.fit=lm(y~x)
check=is.na(a1_data_set$y)
final_dataset=predict(lm.fit,data.frame(x=a1_data_set$x))
x=a1_data_set$x
y=a1_data_set$y
for (i in 1:length(a1_data_set$x)){
if(check[i]==FALSE){
final_dataset[i]=y[i]
}
next
}
lm.newfit=lm(final_dataset~x)
lm.newfit
summary(lm.newfit)
y_predicted=predict(lm.newfit,data.frame(x=a1_data_set$x)
)
y_predicted
cor(y_predicted,final_dataset)
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
definite_data=na.omit(a1_data_set)
y=definite_data$y
x=definite_data$x
lm.fit=lm(y~x)
predicted_data=predict(lm.fit,data.frame(x=definite_data$x))
lm.fit
summary(lm.fit)
cor(y_predicted,final_dataset)
a1_data_set=read.csv("../Downloads/data/a1-data-set.csv")
definite_data=na.omit(a1_data_set)
y=definite_data$y
x=definite_data$x
lm.fit=lm(y~x)
predicted_data=predict(lm.fit,data.frame(x=definite_data$x))
summary(lm.fit)
cor(y_predicted,final_dataset)
set.seed(8)
a2_data_set=read.csv("../Downloads/data/a2-data-set.csv")
index<- sample(1:nrow(a2_data_set),50)
s1=a2_data_set[index,]
index<- sample(1:nrow(a2_data_set),50)
s2=a2_data_set[index,]
s1
names(s1)
IQR(s1$y)
s1
s1[1]
s1[100,:]
s1[100,]
s1[50,]
s1[51,]=c(1,2,3)
s1[51,]
s1$x
s1$x1
set.seed(8)
a2_data_set=read.csv("../Downloads/data/a2-data-set.csv")
index<- sample(1:nrow(a2_data_set),50)
s1=a2_data_set[index,]
index<- sample(1:nrow(a2_data_set),50)
s2=a2_data_set[index,]
outlier1=10*IQR(s1$y)
s1[51,]=x(2,0.5,outlier1)
outlier2=10*IQR(s2$y)
s2[51,]=x(-2,-0.5,outlier2)
set.seed(8)
a2_data_set=read.csv("../Downloads/data/a2-data-set.csv")
index<- sample(1:nrow(a2_data_set),50)
s1=a2_data_set[index,]
index<- sample(1:nrow(a2_data_set),50)
s2=a2_data_set[index,]
outlier1=10*IQR(s1$y)
s1[51,]=c(2,0.5,outlier1)
outlier2=10*IQR(s2$y)
s2[51,]=c(-2,-0.5,outlier2)
x<-data.frame("x1"=s1$x1,"x2"=s1$x2)
y<-s1$y
ctrl=trainControl(number=10,savePrediction=TRUE)
tr.lm<-train(x,y,method="lm", trControl = ctrl)
tr.enet<-train(x,y,method="enet",trControl = ctrl)
library(caret)
x<-data.frame("x1"=s1$x1,"x2"=s1$x2)
y<-s1$y
ctrl=trainControl(number=10,savePrediction=TRUE)
tr.lm<-train(x,y,method="lm", trControl = ctrl)
tr.enet<-train(x,y,method="enet",trControl = ctrl)
x<-data.frame("x1"=s1$x1,"x2"=s1$x2)
y<-s1$y
ctrl=trainControl(number=10,savePrediction=TRUE)
tr.lm<-train(x,y,method="lm", trControl = ctrl)
tr.enet<-train(x,y,method="enet",trControl = ctrl)
tr.lm
summary(tr.lm)
tr.enet
x<-data.frame("x1"=s2$x1,"x2"=s2$x2)
y<-s2$y
ctrl=trainControl(number=10,savePrediction=TRUE)
tr.lm<-train(x,y,method="lm", trControl = ctrl)
tr.enet<-train(x,y,method="enet",trControl = ctrl)
tr.lm
x<- sample(1:100,25)
y=3*x+5
lm.fit=lm(y~x)
lm.fit
x<- sample(1:100,25)
y=3*x+5
lm.fit=lm(y~x)
summary(lm.fit)
set.seed(8)
a2_data_set=read.csv("../Downloads/data/a2-data-set.csv")
index<- sample(1:nrow(a2_data_set),50)
s1=a2_data_set[index,]
index<- sample(1:nrow(a2_data_set),50)
s2=a2_data_set[index,]
outlier1=10*IQR(s1$y)
s1[51,]=c(2,0.5,outlier1)
outlier2=10*IQR(s2$y)
s2[51,]=c(-2,-0.5,outlier2)
library(caret)
x<-data.frame("x1"=s1$x1,"x2"=s1$x2)
y<-s1$y
ctrl=trainControl(number=10,savePrediction=TRUE)
tr.lm<-train(x,y,method="lm", trControl = ctrl)
tr.enet<-train(x,y,method="enet",trControl = ctrl)
x<-data.frame("x1"=s2$x1,"x2"=s2$x2)
y<-s2$y
ctrl=trainControl(number=10,savePrediction=TRUE)
tr.lm<-train(x,y,method="lm", trControl = ctrl)
tr.enet<-train(x,y,method="enet",trControl = ctrl)
summary(tr.lm)
summary(tr.enet)
tr.enet
plot(s2$x1,s2$y)
plot(s2$x2,s2$y)
plot(s1$x1,s1$y)
plot(s1$x2,s1$y)
x<- sample(1:100,25)
err<- sample(1:100,25)
err=err/100
err
x<- sample(1:100,25)
err<- sample(1:100,25)
err=err/100
y=3*x+5+err
lm.fit=lm(y~x)
summary(lm.fit)
x<- sample(1:100,25)
err<- sample(1:100,25)
err=err/10
y=3*x+5+err
lm.fit=lm(y~x)
summary(lm.fit)
x<- sample(1:100,25)
err<- sample(1:100,25)
err=err/100
y=3*x+5+err
lm.fit=lm(y~x)
summary(lm.fit)
s1=data.frame(x,y)
summary(lm.fit)
lm.fit
x<- sample(1:100,25)
err<- sample(1:100,25)
err=err/100
y=3*x+5+err
lm.fit=lm(y~x)
summary(lm.fit)
s1=data.frame(x,y)
View(s1)
x<- sample(1:100,25)
err<- sample(1:100,25)
err=err/10
y=3*x+5+err
lm.fit=lm(y~x)
summary(lm.fit)
x<- sample(1:100,25)
err<- sample(1:100,25)
err=err
y=3*x+5+err
x<- sample(1:100,25)
err<- sample(1:100,25)
err=err
y=3*x+5+err
lm.fit=lm(y~x)
summary(lm.fit)
x<- sample(1:10000,25)
err<- sample(1:10000,25)
err=err
y=3*x+5+err
lm.fit=lm(y~x)
summary(lm.fit)
x<- sample(1:10000,25)
err<- sample(9000:10000,25)
err=err
y=3*x+5+err
lm.fit=lm(y~x)
summary(lm.fit)
setwd("~/")
setwd("~/")
setwd("~/acads")
setwd("~/acads/sem_9/cs_663/13D100011_150010058 _assignment1_GrayTrans/2/images")
read('barbara_AHE.mat')
read('canyon_AHE.mat')
